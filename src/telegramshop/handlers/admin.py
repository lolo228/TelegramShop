"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
"""
import asyncio
from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from ..config import BotConfig
from ..database import Database
from ..states import (
    AddCategoryStates,
    AddProductStates,
    LoadProductItemsStates,
    UserBalanceStates,
    SearchUserStates,
    BroadcastStates,
    EditInfoTextStates,
    EditCategoryStates,
    EditProductStates
)
from ..keyboards import (
    get_admin_main_keyboard,
    get_admin_products_keyboard,
    get_admin_categories_list_keyboard,
    get_admin_category_actions_keyboard,
    get_admin_products_list_keyboard,
    get_admin_product_actions_keyboard,
    get_admin_users_keyboard,
    get_admin_users_list_keyboard,
    get_admin_user_actions_keyboard,
    get_broadcast_confirm_keyboard,
    get_admin_select_category_keyboard,
    get_admin_info_texts_keyboard,
    get_admin_info_text_actions_keyboard,
    get_edit_category_fields_keyboard,
    get_edit_product_fields_keyboard
)


router = Router()


def is_admin(user_id: int, config: BotConfig) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in config.admin_ids


@router.callback_query(F.data == "cancel")
async def cancel_operation(callback: CallbackQuery, state: FSMContext, bot):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    data = await state.get_data()
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    messages_to_delete = data.get('messages_to_delete', [])
    for msg_id in messages_to_delete:
        try:
            await bot.delete_message(callback.message.chat.id, msg_id)
        except Exception:
            pass
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    first_bot_msg = data.get('first_bot_message_id')
    if first_bot_msg:
        try:
            await bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=first_bot_msg,
                text="‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
                reply_markup=get_admin_main_keyboard()
            )
        except Exception:
            await callback.message.edit_text(
                "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
                reply_markup=get_admin_main_keyboard()
            )
    else:
        await callback.message.edit_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_admin_main_keyboard()
        )
    
    await state.clear()
    await callback.answer()


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏

@router.message(Command("admin"))
async def admin_menu(message: Message, config: BotConfig):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    if not is_admin(message.from_user.id, config):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    await message.answer(
        "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_admin_main_keyboard()
    )


@router.callback_query(F.data == "admin_menu")
async def admin_menu_callback(callback: CallbackQuery, config: BotConfig, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    if not is_admin(callback.from_user.id, config):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await state.clear()
    
    await callback.message.edit_text(
        "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_admin_main_keyboard()
    )
    await callback.answer()


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏

@router.callback_query(F.data == "admin_products")
async def admin_products_menu(callback: CallbackQuery, config: BotConfig):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏"""
    if not is_admin(callback.from_user.id, config):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üì¶ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_products_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "admin_categories_list")
async def admin_categories_list(callback: CallbackQuery, config: BotConfig, db: Database):
    """–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    if not is_admin(callback.from_user.id, config):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    categories = await db.get_all_categories()
    
    if not categories:
        await callback.message.edit_text(
            "üìÇ <b>–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π</b>\n\n"
            "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é!",
            reply_markup=get_admin_categories_list_keyboard([])
        )
    else:
        await callback.message.edit_text(
            f"üìÇ <b>–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π</b> (–≤—Å–µ–≥–æ: {len(categories)})\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=get_admin_categories_list_keyboard(categories)
        )
    await callback.answer()


@router.callback_query(F.data.startswith("admin_category_"))
async def admin_category_detail(callback: CallbackQuery, config: BotConfig, db: Database):
    """–î–µ—Ç–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if not is_admin(callback.from_user.id, config):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    category_id = int(callback.data.split("_")[2])
    category = await db.get_category(category_id)
    
    if not category:
        await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if category['is_active'] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
    
    text = (
        f"üìÇ <b>{category['name']}</b>\n\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
    )
    
    if category.get('description'):
        text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {category['description']}\n"
    
    text += f"–ü–æ–∑–∏—Ü–∏—è: {category['position']}\n"
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    products = await db.get_products_by_category(category_id, active_only=False)
    text += f"–¢–æ–≤–∞—Ä–æ–≤: {len(products)}"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_admin_category_actions_keyboard(
            category_id,
            category['is_active']
        )
    )
    await callback.answer()


@router.callback_query(F.data.startswith("admin_toggle_category_"))
async def admin_toggle_category(callback: CallbackQuery, config: BotConfig, db: Database):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if not is_admin(callback.from_user.id, config):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    category_id = int(callback.data.split("_")[3])
    category = await db.get_category(category_id)
    
    if not category:
        await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    new_status = not category['is_active']
    await db.update_category(category_id, is_active=new_status)
    
    status_text = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞" if new_status else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"
    await callback.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è {status_text}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await admin_category_detail(callback, config, db)


@router.callback_query(F.data.startswith("admin_delete_category_"))
async def admin_delete_category(callback: CallbackQuery, config: BotConfig, db: Database):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if not is_admin(callback.from_user.id, config):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    category_id = int(callback.data.split("_")[3])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    products = await db.get_products_by_category(category_id, active_only=False)
    
    if products:
        await callback.answer(
            "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —Ç–æ–≤–∞—Ä–∞–º–∏. –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã.",
            show_alert=True
        )
        return
    
    await db.delete_category(category_id)
    await callback.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    await admin_categories_list(callback, config, db)


@router.callback_query(F.data.startswith("admin_edit_category_"))
async def admin_edit_category_start(callback: CallbackQuery, config: BotConfig, db: Database):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if not is_admin(callback.from_user.id, config):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    category_id = int(callback.data.split("_")[3])
    category = await db.get_category(category_id)
    
    if not category:
        await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category['name']}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_edit_category_fields_keyboard(category_id)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("admin_edit_cat_name_"))
async def admin_edit_category_name_start(callback: CallbackQuery, config: BotConfig, db: Database, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if not is_admin(callback.from_user.id, config):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    category_id = int(callback.data.split("_")[4])
    category = await db.get_category(category_id)
    
    if not category:
        await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    msg = await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {category['name']}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"
    )
    
    await state.update_data(
        category_id=category_id,
        first_bot_message_id=msg.message_id,
        messages_to_delete=[]
    )
    await state.set_state(EditCategoryStates.entering_name)
    await callback.answer()


@router.message(EditCategoryStates.entering_name)
async def admin_edit_category_name_save(message: Message, state: FSMContext, db: Database):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    data = await state.get_data()
    category_id = data['category_id']
    new_name = message.text
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    await db.update_category(category_id, name=new_name)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    messages_to_delete = data.get('messages_to_delete', [])
    messages_to_delete.append(message.message_id)
    
    for msg_id in messages_to_delete:
        try:
            await message.bot.delete_message(message.chat.id, msg_id)
        except Exception:
            pass
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    first_bot_msg = data.get('first_bot_message_id')
    if first_bot_msg:
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=first_bot_msg,
                text=f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '<b>{new_name}</b>'!",
                reply_markup=get_admin_categories_list_keyboard([])
            )
        except Exception:
            await message.answer(
                f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '<b>{new_name}</b>'!"
            )
    else:
        await message.answer(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '<b>{new_name}</b>'!"
        )
    
    await state.clear()


@router.callback_query(F.data.startswith("admin_edit_cat_desc_"))
async def admin_edit_category_desc_start(callback: CallbackQuery, config: BotConfig, db: Database, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if not is_admin(callback.from_user.id, config):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    category_id = int(callback.data.split("_")[4])
    category = await db.get_category(category_id)
    
    if not category:
        await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    current_desc = category.get('description', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    
    msg = await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {current_desc}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–ª–∏ '-' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):"
    )
    
    await state.update_data(
        category_id=category_id,
        first_bot_message_id=msg.message_id,
        messages_to_delete=[]
    )
    await state.set_state(EditCategoryStates.entering_description)
    await callback.answer()


@router.message(EditCategoryStates.entering_description)
async def admin_edit_category_desc_save(message: Message, state: FSMContext, db: Database):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    data = await state.get_data()
    category_id = data['category_id']
    new_desc = "" if message.text == "-" else message.text
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    await db.update_category(category_id, description=new_desc)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    messages_to_delete = data.get('messages_to_delete', [])
    messages_to_delete.append(message.message_id)
    
    for msg_id in messages_to_delete:
        try:
            await message.bot.delete_message(message.chat.id, msg_id)
        except Exception:
            pass
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    first_bot_msg = data.get('first_bot_message_id')
    result_text = "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!" if new_desc else "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!"
    
    if first_bot_msg:
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=first_bot_msg,
                text=result_text,
                reply_markup=get_admin_categories_list_keyboard([])
            )
        except Exception:
            await message.answer(result_text)
    else:
        await message.answer(result_text)
    
    await state.clear()


@router.callback_query(F.data == "admin_add_category")
async def admin_add_category_start(callback: CallbackQuery, config: BotConfig, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if not is_admin(callback.from_user.id, config):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    msg = await callback.message.edit_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.update_data(
        first_bot_message_id=msg.message_id,
        messages_to_delete=[]
    )
    await state.set_state(AddCategoryStates.name)
    await callback.answer()


@router.message(AddCategoryStates.name)
async def admin_add_category_name(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    data = await state.get_data()
    messages_to_delete = data.get('messages_to_delete', [])
    messages_to_delete.append(message.message_id)  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    await state.update_data(
        name=message.text,
        messages_to_delete=messages_to_delete
    )
    
    msg = await message.answer(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
    )
    messages_to_delete.append(msg.message_id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    await state.update_data(messages_to_delete=messages_to_delete)
    await state.set_state(AddCategoryStates.description)


@router.message(AddCategoryStates.description)
async def admin_add_category_description(message: Message, state: FSMContext, db: Database):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    data = await state.get_data()
    description = "" if message.text == "-" else message.text
    
    category_id = await db.add_category(
        name=data['name'],
        description=description
    )
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    messages_to_delete = data.get('messages_to_delete', [])
    messages_to_delete.append(message.message_id)  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    for msg_id in messages_to_delete:
        try:
            await message.bot.delete_message(message.chat.id, msg_id)
        except Exception:
            pass
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    first_bot_msg = data.get('first_bot_message_id')
    if first_bot_msg:
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=first_bot_msg,
                text=f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '<b>{data['name']}</b>' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                     f"ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_id}",
                reply_markup=get_admin_products_keyboard()
            )
        except Exception:
            await message.answer(
                f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '<b>{data['name']}</b>' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                f"ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_id}"
            )
    else:
        await message.answer(
            f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '<b>{data['name']}</b>' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_id}"
        )
    
    await state.clear()


@router.callback_query(F.data == "admin_products_list")
async def admin_products_list(callback: CallbackQuery, config: BotConfig, db: Database):
    """–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"""
    if not is_admin(callback.from_user.id, config):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    products = await db.get_all_products()
    
    if not products:
        await callback.message.edit_text(
            "üì¶ <b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
            "–¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä!",
            reply_markup=get_admin_products_list_keyboard([])
        )
    else:
        await callback.message.edit_text(
            f"üì¶ <b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤</b> (–≤—Å–µ–≥–æ: {len(products)})\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=get_admin_products_list_keyboard(products)
        )
    await callback.answer()


@router.callback_query(F.data.startswith("admin_product_"))
async def admin_product_detail(callback: CallbackQuery, config: BotConfig, db: Database):
    """–î–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞"""
    if not is_admin(callback.from_user.id, config):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    parts = callback.data.split("_")
    if len(parts) < 3:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    try:
        product_id = int(parts[2])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞", show_alert=True)
        return
    
    product = await db.get_product(product_id)
    
    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    category = await db.get_category(product['category_id'])
    category_name = category['name'] if category else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    
    status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if product['is_active'] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    
    text = (
        f"üì¶ <b>{product['name']}</b>\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
        f"–¶–µ–Ω–∞: {product['price']} —Ä—É–±.\n"
        f"–í –Ω–∞–ª–∏—á–∏–∏: {product['stock_count']} —à—Ç.\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
    )
    
    if product.get('description'):
        text += f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_admin_product_actions_keyboard(
            product_id,
            product['is_active']
        )
    )
    await callback.answer()


@router.callback_query(F.data.startswith("admin_toggle_product_"))
async def admin_toggle_product(callback: CallbackQuery, config: BotConfig, db: Database):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞"""
    if not is_admin(callback.from_user.id, config):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    product_id = int(callback.data.split("_")[3])
    product = await db.get_product(product_id)
    
    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    new_status = not product['is_active']
    await db.update_product(product_id, is_active=new_status)
    
    status_text = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if new_status else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
    await callback.answer(f"‚úÖ –¢–æ–≤–∞—Ä {status_text}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await admin_product_detail(callback, config, db)


@router.callback_query(F.data.startswith("admin_delete_product_"))
async def admin_delete_product(callback: CallbackQuery, config: BotConfig, db: Database):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
    if not is_admin(callback.from_user.id, config):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    product_id = int(callback.data.split("_")[3])
    
    await db.delete_product(product_id)
    await callback.answer("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤
    await admin_products_list(callback, config, db)


@router.callback_query(F.data.startswith("admin_edit_product_"))
async def admin_edit_product_start(callback: CallbackQuery, config: BotConfig, db: Database):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    if not is_admin(callback.from_user.id, config):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    parts = callback.data.split("_")
    if len(parts) < 4:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    try:
        product_id = int(parts[3])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞", show_alert=True)
        return
    
    product = await db.get_product(product_id)
    
    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        f"–¢–æ–≤–∞—Ä: {product['name']}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_edit_product_fields_keyboard(product_id)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("admin_edit_prod_name_"))
async def admin_edit_product_name_start(callback: CallbackQuery, config: BotConfig, db: Database, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    if not is_admin(callback.from_user.id, config):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    product_id = int(callback.data.split("_")[4])
    product = await db.get_product(product_id)
    
    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    msg = await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {product['name']}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:"
    )
    
    await state.update_data(
        product_id=product_id,
        first_bot_message_id=msg.message_id,
        messages_to_delete=[]
    )
    await state.set_state(EditProductStates.entering_name)
    await callback.answer()


@router.message(EditProductStates.entering_name)
async def admin_edit_product_name_save(message: Message, state: FSMContext, db: Database):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    data = await state.get_data()
    product_id = data['product_id']
    new_name = message.text
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    await db.update_product(product_id, name=new_name)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    messages_to_delete = data.get('messages_to_delete', [])
    messages_to_delete.append(message.message_id)
    
    for msg_id in messages_to_delete:
        try:
            await message.bot.delete_message(message.chat.id, msg_id)
        except Exception:
            pass
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    first_bot_msg = data.get('first_bot_message_id')
    if first_bot_msg:
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=first_bot_msg,
                text=f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '<b>{new_name}</b>'!",
                reply_markup=get_admin_products_list_keyboard([])
            )
        except Exception:
            await message.answer(
                f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '<b>{new_name}</b>'!"
            )
    else:
        await message.answer(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '<b>{new_name}</b>'!"
        )
    
    await state.clear()


@router.callback_query(F.data.startswith("admin_edit_prod_desc_"))
async def admin_edit_product_desc_start(callback: CallbackQuery, config: BotConfig, db: Database, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    if not is_admin(callback.from_user.id, config):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    product_id = int(callback.data.split("_")[4])
    product = await db.get_product(product_id)
    
    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    current_desc = product.get('description', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    
    msg = await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {current_desc}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ '-' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):"
    )
    
    await state.update_data(
        product_id=product_id,
        first_bot_message_id=msg.message_id,
        messages_to_delete=[]
    )
    await state.set_state(EditProductStates.entering_description)
    await callback.answer()


@router.message(EditProductStates.entering_description)
async def admin_edit_product_desc_save(message: Message, state: FSMContext, db: Database):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    data = await state.get_data()
    product_id = data['product_id']
    new_desc = "" if message.text == "-" else message.text
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    await db.update_product(product_id, description=new_desc)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    messages_to_delete = data.get('messages_to_delete', [])
    messages_to_delete.append(message.message_id)
    
    for msg_id in messages_to_delete:
        try:
            await message.bot.delete_message(message.chat.id, msg_id)
        except Exception:
            pass
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    first_bot_msg = data.get('first_bot_message_id')
    result_text = "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!" if new_desc else "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!"
    
    if first_bot_msg:
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=first_bot_msg,
                text=result_text,
                reply_markup=get_admin_products_list_keyboard([])
            )
        except Exception:
            await message.answer(result_text)
    else:
        await message.answer(result_text)
    
    await state.clear()


@router.callback_query(F.data.startswith("admin_edit_prod_price_"))
async def admin_edit_product_price_start(callback: CallbackQuery, config: BotConfig, db: Database, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞"""
    if not is_admin(callback.from_user.id, config):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    product_id = int(callback.data.split("_")[4])
    product = await db.get_product(product_id)
    
    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    msg = await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {product['price']} —Ä—É–±.\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):"
    )
    
    await state.update_data(
        product_id=product_id,
        first_bot_message_id=msg.message_id,
        messages_to_delete=[]
    )
    await state.set_state(EditProductStates.entering_price)
    await callback.answer()


@router.message(EditProductStates.entering_price)
async def admin_edit_product_price_save(message: Message, state: FSMContext, db: Database):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞"""
    data = await state.get_data()
    product_id = data['product_id']
    messages_to_delete = data.get('messages_to_delete', [])
    
    try:
        new_price = float(message.text)
        if new_price <= 0:
            raise ValueError
    except ValueError:
        msg = await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
        messages_to_delete.append(message.message_id)
        messages_to_delete.append(msg.message_id)
        await state.update_data(messages_to_delete=messages_to_delete)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
    await db.update_product(product_id, price=new_price)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    messages_to_delete.append(message.message_id)
    
    for msg_id in messages_to_delete:
        try:
            await message.bot.delete_message(message.chat.id, msg_id)
        except Exception:
            pass
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    first_bot_msg = data.get('first_bot_message_id')
    if first_bot_msg:
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=first_bot_msg,
                text=f"‚úÖ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{new_price} —Ä—É–±.</b>!",
                reply_markup=get_admin_products_list_keyboard([])
            )
        except Exception:
            await message.answer(
                f"‚úÖ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{new_price} —Ä—É–±.</b>!"
            )
    else:
        await message.answer(
            f"‚úÖ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{new_price} —Ä—É–±.</b>!"
        )
    
    await state.clear()


@router.callback_query(F.data == "admin_add_product")
async def admin_add_product_start(callback: CallbackQuery, config: BotConfig, db: Database, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    if not is_admin(callback.from_user.id, config):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    categories = await db.get_all_categories()
    
    if not categories:
        await callback.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!",
            show_alert=True
        )
        return
    
    msg = await callback.message.edit_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=get_admin_select_category_keyboard(categories)
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    await state.update_data(
        first_bot_message_id=msg.message_id,
        messages_to_delete=[]
    )
    await state.set_state(AddProductStates.category)
    await callback.answer()


@router.callback_query(AddProductStates.category, F.data.startswith("admin_select_cat_"))
async def admin_add_product_category(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
    category_id = int(callback.data.split("_")[3])
    data = await state.get_data()
    
    await state.update_data(
        category_id=category_id,
        first_bot_message_id=data.get('first_bot_message_id'),
        messages_to_delete=data.get('messages_to_delete', [])
    )
    
    await callback.message.edit_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:"
    )
    await state.set_state(AddProductStates.name)
    await callback.answer()


@router.message(AddProductStates.name)
async def admin_add_product_name(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    data = await state.get_data()
    messages_to_delete = data.get('messages_to_delete', [])
    messages_to_delete.append(message.message_id)
    
    await state.update_data(
        name=message.text,
        messages_to_delete=messages_to_delete
    )
    
    msg = await message.answer(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
    )
    messages_to_delete.append(msg.message_id)
    await state.update_data(messages_to_delete=messages_to_delete)
    await state.set_state(AddProductStates.description)


@router.message(AddProductStates.description)
async def admin_add_product_description(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    description = "" if message.text == "-" else message.text
    data = await state.get_data()
    messages_to_delete = data.get('messages_to_delete', [])
    messages_to_delete.append(message.message_id)
    
    await state.update_data(
        description=description,
        messages_to_delete=messages_to_delete
    )
    
    msg = await message.answer(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):"
    )
    messages_to_delete.append(msg.message_id)
    await state.update_data(messages_to_delete=messages_to_delete)
    await state.set_state(AddProductStates.price)


@router.message(AddProductStates.price)
async def admin_add_product_price(message: Message, state: FSMContext, db: Database):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
    data = await state.get_data()
    messages_to_delete = data.get('messages_to_delete', [])
    
    try:
        price = float(message.text)
        if price <= 0:
            raise ValueError
    except ValueError:
        msg = await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
        messages_to_delete.append(message.message_id)
        messages_to_delete.append(msg.message_id)
        await state.update_data(messages_to_delete=messages_to_delete)
        return
    
    product_id = await db.add_product(
        category_id=data['category_id'],
        name=data['name'],
        description=data['description'],
        price=price
    )
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    messages_to_delete.append(message.message_id)
    for msg_id in messages_to_delete:
        try:
            await message.bot.delete_message(message.chat.id, msg_id)
        except Exception:
            pass
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    first_bot_msg = data.get('first_bot_message_id')
    if first_bot_msg:
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=first_bot_msg,
                text=f"‚úÖ –¢–æ–≤–∞—Ä '<b>{data['name']}</b>' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                     f"ID —Ç–æ–≤–∞—Ä–∞: {product_id}\n"
                     f"–¶–µ–Ω–∞: {price} —Ä—É–±.\n\n"
                     f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.",
                reply_markup=get_admin_products_keyboard()
            )
        except Exception:
            await message.answer(
                f"‚úÖ –¢–æ–≤–∞—Ä '<b>{data['name']}</b>' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"ID —Ç–æ–≤–∞—Ä–∞: {product_id}\n"
                f"–¶–µ–Ω–∞: {price} —Ä—É–±."
            )
    else:
        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä '<b>{data['name']}</b>' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"ID —Ç–æ–≤–∞—Ä–∞: {product_id}\n"
            f"–¶–µ–Ω–∞: {price} —Ä—É–±."
        )
    
    await state.clear()


@router.callback_query(F.data.startswith("admin_load_items_"))
async def admin_load_items_start(callback: CallbackQuery, config: BotConfig, db: Database, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
    if not is_admin(callback.from_user.id, config):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    product_id = int(callback.data.split("_")[3])
    product = await db.get_product(product_id)
    
    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    msg = await callback.message.edit_text(
        f"üì• <b>–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π</b>\n\n"
        f"–¢–æ–≤–∞—Ä: {product['name']}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏).\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        f"<code>login1:password1\n"
        f"login2:password2\n"
        f"login3:password3</code>\n\n"
        f"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª."
    )
    
    await state.update_data(
        product_id=product_id,
        first_bot_message_id=msg.message_id,
        messages_to_delete=[]
    )
    await state.set_state(LoadProductItemsStates.entering_items)
    await callback.answer()


@router.message(LoadProductItemsStates.entering_items, F.text)
async def admin_load_items_text(message: Message, state: FSMContext, db: Database):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    data = await state.get_data()
    product_id = data['product_id']
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    items = [line.strip() for line in message.text.split('\n') if line.strip()]
    
    if not items:
        await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ç–æ–≤–∞—Ä–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏")
        return
    
    count = await db.add_product_items_bulk(product_id, items)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    messages_to_delete = data.get('messages_to_delete', [])
    messages_to_delete.append(message.message_id)
    
    for msg_id in messages_to_delete:
        try:
            await message.bot.delete_message(message.chat.id, msg_id)
        except Exception:
            pass
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    first_bot_msg = data.get('first_bot_message_id')
    if first_bot_msg:
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=first_bot_msg,
                text=f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ <b>{count}</b> —Ç–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π!",
                reply_markup=get_admin_products_keyboard()
            )
        except Exception:
            await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ <b>{count}</b> —Ç–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π!")
    else:
        await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ <b>{count}</b> —Ç–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π!")
    
    await state.clear()


@router.message(LoadProductItemsStates.entering_items, F.document)
async def admin_load_items_file(message: Message, state: FSMContext, db: Database, bot):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
    data = await state.get_data()
    product_id = data['product_id']
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file = await bot.get_file(message.document.file_id)
    file_content = await bot.download_file(file.file_path)
    
    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    text = file_content.read().decode('utf-8')
    items = [line.strip() for line in text.split('\n') if line.strip()]
    
    if not items:
        await message.answer("‚ùå –§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    count = await db.add_product_items_bulk(product_id, items)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    messages_to_delete = data.get('messages_to_delete', [])
    messages_to_delete.append(message.message_id)
    
    for msg_id in messages_to_delete:
        try:
            await message.bot.delete_message(message.chat.id, msg_id)
        except Exception:
            pass
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    first_bot_msg = data.get('first_bot_message_id')
    if first_bot_msg:
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=first_bot_msg,
                text=f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ <b>{count}</b> —Ç–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–∞!",
                reply_markup=get_admin_products_keyboard()
            )
        except Exception:
            await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ <b>{count}</b> —Ç–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–∞!")
    else:
        await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ <b>{count}</b> —Ç–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–∞!")
    
    await state.clear()


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏

@router.callback_query(F.data == "admin_users")
async def admin_users_menu(callback: CallbackQuery, config: BotConfig):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    if not is_admin(callback.from_user.id, config):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_users_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("admin_users_list_"))
async def admin_users_list(callback: CallbackQuery, config: BotConfig, db: Database):
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    if not is_admin(callback.from_user.id, config):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    page = int(callback.data.split("_")[3])
    limit = 10
    offset = page * limit
    
    users = await db.get_all_users(limit=limit, offset=offset)
    total_count = await db.get_users_count()
    total_pages = (total_count + limit - 1) // limit
    
    if not users:
        await callback.message.edit_text(
            "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
            reply_markup=get_admin_users_list_keyboard([], page, total_pages)
        )
    else:
        await callback.message.edit_text(
            f"üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
            f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_count}",
            reply_markup=get_admin_users_list_keyboard(users, page, total_pages)
        )
    await callback.answer()


@router.callback_query(F.data.startswith("admin_user_"))
async def admin_user_detail(callback: CallbackQuery, config: BotConfig, db: Database):
    """–î–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(callback.from_user.id, config):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    user_id = int(callback.data.split("_")[2])
    user = await db.get_user(user_id)
    
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    username = f"@{user['username']}" if user.get('username') else "–ù–µ—Ç username"
    status = "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if user.get('is_blocked') else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
    
    text = (
        f"üë§ <b>{user['first_name']}</b>\n\n"
        f"ID: <code>{user['user_id']}</code>\n"
        f"Username: {username}\n"
        f"–ë–∞–ª–∞–Ω—Å: {user['balance']} —Ä—É–±.\n"
        f"–ü–æ–∫—É–ø–æ–∫: {user['purchases_count']}\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
        f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user['created_at']}"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_admin_user_actions_keyboard(
            user_id,
            user.get('is_blocked', False)
        )
    )
    await callback.answer()


@router.callback_query(F.data.startswith("admin_toggle_block_"))
async def admin_toggle_block_user(callback: CallbackQuery, config: BotConfig, db: Database):
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(callback.from_user.id, config):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    user_id = int(callback.data.split("_")[3])
    user = await db.get_user(user_id)
    
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    new_status = not user.get('is_blocked', False)
    await db.set_user_blocked(user_id, new_status)
    
    status_text = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if new_status else "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    await callback.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {status_text}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await admin_user_detail(callback, config, db)


@router.callback_query(F.data.startswith("admin_change_balance_"))
async def admin_change_balance_start(callback: CallbackQuery, config: BotConfig, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    if not is_admin(callback.from_user.id, config):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    user_id = int(callback.data.split("_")[3])
    
    msg = await callback.message.edit_text(
        "üí∞ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:\n"
        "‚Ä¢ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n"
        "‚Ä¢ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ -50"
    )
    
    await state.update_data(
        user_id=user_id,
        first_bot_message_id=msg.message_id,
        messages_to_delete=[]
    )
    await state.set_state(UserBalanceStates.entering_amount)
    await callback.answer()


@router.message(UserBalanceStates.entering_amount)
async def admin_change_balance_amount(message: Message, state: FSMContext, db: Database):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = await state.get_data()
    messages_to_delete = data.get('messages_to_delete', [])
    
    try:
        amount = float(message.text)
    except ValueError:
        msg = await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        messages_to_delete.append(message.message_id)
        messages_to_delete.append(msg.message_id)
        await state.update_data(messages_to_delete=messages_to_delete)
        return
    
    user_id = data['user_id']
    
    user = await db.get_user(user_id)
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    await db.update_user_balance(user_id, amount)
    
    action = "–ø–æ–ø–æ–ª–Ω–µ–Ω" if amount > 0 else "—Å–ø–∏—Å–∞–Ω"
    new_balance = user['balance'] + amount
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    messages_to_delete.append(message.message_id)
    for msg_id in messages_to_delete:
        try:
            await message.bot.delete_message(message.chat.id, msg_id)
        except Exception:
            pass
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    first_bot_msg = data.get('first_bot_message_id')
    if first_bot_msg:
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=first_bot_msg,
                text=f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {action}!\n\n"
                     f"–°—É–º–º–∞: {abs(amount)} —Ä—É–±.\n"
                     f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} —Ä—É–±.",
                reply_markup=get_admin_users_keyboard()
            )
        except Exception:
            await message.answer(
                f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {action}!\n\n"
                f"–°—É–º–º–∞: {abs(amount)} —Ä—É–±.\n"
                f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} —Ä—É–±."
            )
    else:
        await message.answer(
            f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {action}!\n\n"
            f"–°—É–º–º–∞: {abs(amount)} —Ä—É–±.\n"
            f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} —Ä—É–±."
        )
    
    await state.clear()


@router.callback_query(F.data == "admin_search_user")
async def admin_search_user_start(callback: CallbackQuery, config: BotConfig, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(callback.from_user.id, config):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    msg = await callback.message.edit_text(
        "üîç <b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ username:"
    )
    
    await state.update_data(
        first_bot_message_id=msg.message_id,
        messages_to_delete=[]
    )
    await state.set_state(SearchUserStates.entering_query)
    await callback.answer()


@router.message(SearchUserStates.entering_query)
async def admin_search_user_query(message: Message, state: FSMContext, db: Database):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = await state.get_data()
    query = message.text.strip().replace('@', '')
    
    users = await db.search_users(query)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    messages_to_delete = data.get('messages_to_delete', [])
    messages_to_delete.append(message.message_id)
    
    for msg_id in messages_to_delete:
        try:
            await message.bot.delete_message(message.chat.id, msg_id)
        except Exception:
            pass
    
    first_bot_msg = data.get('first_bot_message_id')
    
    if not users:
        if first_bot_msg:
            try:
                await message.bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=first_bot_msg,
                    text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.",
                    reply_markup=get_admin_users_keyboard()
                )
            except Exception:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
        await state.clear()
        return
    
    await state.clear()
    
    if len(users) == 1:
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –¥–µ—Ç–∞–ª–∏
        user = users[0]
        username = f"@{user['username']}" if user.get('username') else "–ù–µ—Ç username"
        status = "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if user.get('is_blocked') else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
        
        text = (
            f"üë§ <b>{user['first_name']}</b>\n\n"
            f"ID: <code>{user['user_id']}</code>\n"
            f"Username: {username}\n"
            f"–ë–∞–ª–∞–Ω—Å: {user['balance']} —Ä—É–±.\n"
            f"–ü–æ–∫—É–ø–æ–∫: {user['purchases_count']}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user['created_at']}"
        )
        
        if first_bot_msg:
            try:
                await message.bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=first_bot_msg,
                    text=text,
                    reply_markup=get_admin_user_actions_keyboard(
                        user['user_id'],
                        user.get('is_blocked', False)
                    )
                )
            except Exception:
                await message.answer(
                    text,
                    reply_markup=get_admin_user_actions_keyboard(
                        user['user_id'],
                        user.get('is_blocked', False)
                    )
                )
        else:
            await message.answer(
                text,
                reply_markup=get_admin_user_actions_keyboard(
                    user['user_id'],
                    user.get('is_blocked', False)
                )
            )
    else:
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
        text = f"üîç <b>–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {len(users)}\n\n"
        
        for user in users[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
            username = f"@{user['username']}" if user.get('username') else user['first_name']
            status = "üö´" if user.get('is_blocked') else "‚úÖ"
            text += f"{status} {username} (ID: {user['user_id']}) - {user['balance']}‚ÇΩ\n"
        
        if first_bot_msg:
            try:
                await message.bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=first_bot_msg,
                    text=text,
                    reply_markup=get_admin_users_list_keyboard(users[:10], 0, 1)
                )
            except Exception:
                await message.answer(
                    text,
                    reply_markup=get_admin_users_list_keyboard(users[:10], 0, 1)
                )
        else:
            await message.answer(
                text,
                reply_markup=get_admin_users_list_keyboard(users[:10], 0, 1)
            )


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

@router.callback_query(F.data == "admin_stats")
async def admin_statistics(callback: CallbackQuery, config: BotConfig, db: Database):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not is_admin(callback.from_user.id, config):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    stats = await db.get_statistics()
    
    text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞</b>\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users_count']}\n"
        f"üì¶ –ó–∞–∫–∞–∑–æ–≤: {stats['orders_count']}\n"
        f"üí∞ –í—ã—Ä—É—á–∫–∞: {stats['revenue']} —Ä—É–±.\n\n"
        f"üìÇ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {stats['active_categories']}\n"
        f"üõç –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {stats['active_products']}\n"
        f"üì• –¢–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏: {stats['items_in_stock']}"
    )
    
    from ..keyboards import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                    callback_data="admin_stats"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                    callback_data="admin_menu"
                )
            ]
        ]
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


# –†–∞—Å—Å—ã–ª–∫–∞

@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_start(callback: CallbackQuery, config: BotConfig, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(callback.from_user.id, config):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    msg = await callback.message.edit_text(
        "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."
    )
    
    await state.update_data(
        first_bot_message_id=msg.message_id,
        messages_to_delete=[]
    )
    await state.set_state(BroadcastStates.entering_message)
    await callback.answer()


@router.message(BroadcastStates.entering_message)
async def admin_broadcast_message(message: Message, state: FSMContext, db: Database):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
    data = await state.get_data()
    messages_to_delete = data.get('messages_to_delete', [])
    messages_to_delete.append(message.message_id)
    
    await state.update_data(
        message_text=message.text,
        messages_to_delete=messages_to_delete
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_count = await db.get_users_count()
    
    msg = await message.answer(
        f"üì¢ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
        f"{message.text}\n\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {users_count}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:",
        reply_markup=get_broadcast_confirm_keyboard()
    )
    messages_to_delete.append(msg.message_id)
    await state.update_data(messages_to_delete=messages_to_delete)
    await state.set_state(BroadcastStates.confirming)


@router.callback_query(BroadcastStates.confirming, F.data == "admin_broadcast_confirm")
async def admin_broadcast_confirm(callback: CallbackQuery, state: FSMContext, db: Database, bot):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    data = await state.get_data()
    message_text = data['message_text']
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    messages_to_delete = data.get('messages_to_delete', [])
    for msg_id in messages_to_delete:
        try:
            await bot.delete_message(callback.message.chat.id, msg_id)
        except Exception:
            pass
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å—Ç–∞—Ç—É—Å "–ò–¥–µ—Ç —Ä–∞—Å—Å—ã–ª–∫–∞"
    first_bot_msg = data.get('first_bot_message_id')
    if first_bot_msg:
        try:
            await bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=first_bot_msg,
                text="üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞...</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
            )
        except Exception:
            pass
    else:
        await callback.message.edit_text(
            "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞...</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
        )
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    all_users = []
    offset = 0
    limit = 100
    
    while True:
        users = await db.get_all_users(limit=limit, offset=offset)
        if not users:
            break
        all_users.extend(users)
        offset += limit
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    success = 0
    failed = 0
    
    for user in all_users:
        try:
            await bot.send_message(user['user_id'], message_text)
            success += 1
            await asyncio.sleep(0.05)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        except Exception:
            failed += 1
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    msg_id_to_edit = first_bot_msg if first_bot_msg else callback.message.message_id
    try:
        await bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=msg_id_to_edit,
            text=f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                 f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
                 f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed}",
            reply_markup=get_admin_main_keyboard()
        )
    except Exception:
        await callback.message.answer(
            f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed}"
        )
    
    await state.clear()
    await callback.answer()


@router.callback_query(BroadcastStates.confirming, F.data == "admin_broadcast_cancel")
async def admin_broadcast_cancel(callback: CallbackQuery, state: FSMContext, bot):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    data = await state.get_data()
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    messages_to_delete = data.get('messages_to_delete', [])
    for msg_id in messages_to_delete:
        try:
            await bot.delete_message(callback.message.chat.id, msg_id)
        except Exception:
            pass
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    first_bot_msg = data.get('first_bot_message_id')
    if first_bot_msg:
        try:
            await bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=first_bot_msg,
                text="‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
                reply_markup=get_admin_main_keyboard()
            )
        except Exception:
            await callback.message.edit_text(
                "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
                reply_markup=get_admin_main_keyboard()
            )
    else:
        await callback.message.edit_text(
            "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_admin_main_keyboard()
        )
    
    await state.clear()
    await callback.answer()


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏

@router.callback_query(F.data == "admin_info_texts")
async def admin_info_texts_menu(callback: CallbackQuery, config: BotConfig, state: FSMContext):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏"""
    if not is_admin(callback.from_user.id, config):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await state.clear()
    
    await callback.message.edit_text(
        "üìù <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞–º–∏ –∫–Ω–æ–ø–æ–∫</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_admin_info_texts_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("admin_info_text_"))
async def admin_info_text_detail(callback: CallbackQuery, config: BotConfig, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º"""
    if not is_admin(callback.from_user.id, config):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    text_type = callback.data.split("_")[3]  # rules, guarantees, help
    
    text_names = {
        'rules': 'üìã –ü—Ä–∞–≤–∏–ª–∞',
        'guarantees': '‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏–∏',
        'help': '‚ùì –ü–æ–º–æ—â—å'
    }
    
    text_name = text_names.get(text_type, text_type)
    
    await callback.message.edit_text(
        f"üìù <b>{text_name}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_info_text_actions_keyboard(text_type)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("admin_info_preview_"))
async def admin_info_text_preview(callback: CallbackQuery, config: BotConfig, db: Database, bot):
    """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—Å—Ç–∞"""
    if not is_admin(callback.from_user.id, config):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    text_type = callback.data.split("_")[3]
    
    text = await db.get_info_text(text_type)
    
    if not text:
        await callback.answer("‚ùå –¢–µ–∫—Å—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", show_alert=True)
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    preview_msg = await callback.message.answer(
        f"üëÅ <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</b>\n\n{text}"
    )
    await callback.answer("‚úÖ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    
    # –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
    from ..utils import delete_message_after_delay
    asyncio.create_task(
        delete_message_after_delay(bot, callback.message.chat.id, preview_msg.message_id, 30)
    )


@router.callback_query(F.data.startswith("admin_info_edit_"))
async def admin_info_text_edit_start(callback: CallbackQuery, config: BotConfig, state: FSMContext, db: Database):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
    if not is_admin(callback.from_user.id, config):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    text_type = callback.data.split("_")[3]
    
    text_names = {
        'rules': 'üìã –ü—Ä–∞–≤–∏–ª–∞',
        'guarantees': '‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏–∏',
        'help': '‚ùì –ü–æ–º–æ—â—å'
    }
    
    text_name = text_names.get(text_type, text_type)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç
    current_text = await db.get_info_text(text_type)
    
    message_text = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {text_name}</b>\n\n"
    
    if current_text:
        message_text += f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n\n{current_text}\n\n"
    
    message_text += "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ):"
    
    msg = await callback.message.edit_text(message_text)
    
    await state.update_data(
        text_type=text_type,
        first_bot_message_id=msg.message_id,
        messages_to_delete=[]
    )
    await state.set_state(EditInfoTextStates.entering_text)
    await callback.answer()


@router.message(EditInfoTextStates.entering_text)
async def admin_info_text_edit_save(message: Message, state: FSMContext, db: Database):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    data = await state.get_data()
    text_type = data['text_type']
    
    new_text = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
    await db.set_info_text(text_type, new_text)
    
    text_names = {
        'rules': 'üìã –ü—Ä–∞–≤–∏–ª–∞',
        'guarantees': '‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏–∏',
        'help': '‚ùì –ü–æ–º–æ—â—å'
    }
    
    text_name = text_names.get(text_type, text_type)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    messages_to_delete = data.get('messages_to_delete', [])
    messages_to_delete.append(message.message_id)
    
    for msg_id in messages_to_delete:
        try:
            await message.bot.delete_message(message.chat.id, msg_id)
        except Exception:
            pass
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    first_bot_msg = data.get('first_bot_message_id')
    if first_bot_msg:
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=first_bot_msg,
                text=f"‚úÖ –¢–µ–∫—Å—Ç '<b>{text_name}</b>' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
                     f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç.",
                reply_markup=get_admin_info_texts_keyboard()
            )
        except Exception:
            await message.answer(
                f"‚úÖ –¢–µ–∫—Å—Ç '<b>{text_name}</b>' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç.",
                reply_markup=get_admin_info_texts_keyboard()
            )
    else:
        await message.answer(
            f"‚úÖ –¢–µ–∫—Å—Ç '<b>{text_name}</b>' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç.",
            reply_markup=get_admin_info_texts_keyboard()
        )
    
    await state.clear()


@router.callback_query(F.data.startswith("admin_info_reset_"))
async def admin_info_text_reset(callback: CallbackQuery, config: BotConfig, db: Database):
    """–°–±—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"""
    if not is_admin(callback.from_user.id, config):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    text_type = callback.data.split("_")[3]
    
    default_texts = {
        'rules': (
            "üìã –ü—Ä–∞–≤–∏–ª–∞ –º–∞–≥–∞–∑–∏–Ω–∞\n\n"
            "1Ô∏è‚É£ –í—Å–µ –ø–æ–∫—É–ø–∫–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞\n"
            "2Ô∏è‚É£ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º —Å —Ç–æ–≤–∞—Ä–æ–º\n"
            "3Ô∏è‚É£ –ó–∞–ø—Ä–µ—â–µ–Ω–∞ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤\n"
            "4Ô∏è‚É£ –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
            "5Ô∏è‚É£ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 5-15 –º–∏–Ω—É—Ç\n\n"
            "‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –∏–∑–º–µ–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞"
        ),
        'guarantees': (
            "‚úÖ –ù–∞—à–∏ –≥–∞—Ä–∞–Ω—Ç–∏–∏\n\n"
            "üîí –í—Å–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç\n"
            "üíé –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã\n"
            "‚ö°Ô∏è –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –≤—ã–¥–∞—á–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã\n"
            "üîÑ –ó–∞–º–µ–Ω–∞ –Ω–µ—Ä–∞–±–æ—á–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤\n"
            "üë®‚Äçüíº –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n"
            "üíØ 100% –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–µ–π\n\n"
            "‚ù§Ô∏è –ú—ã –¥–æ—Ä–æ–∂–∏–º –∫–∞–∂–¥—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º!"
        ),
        'help': (
            "‚ùì –ü–æ–º–æ—â—å\n\n"
            "üõí –ö–∞–∫ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä:\n"
            "1. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞\n"
            "3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É\n"
            "4. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–≤–∞—Ä –º–≥–Ω–æ–≤–µ–Ω–Ω–æ\n\n"
            "üí∞ –ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å:\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å' –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\n\n"
            "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        )
    }
    
    default_text = default_texts.get(text_type)
    
    if not default_text:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ–∫—Å—Ç–∞", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
    await db.set_info_text(text_type, default_text)
    
    text_names = {
        'rules': 'üìã –ü—Ä–∞–≤–∏–ª–∞',
        'guarantees': '‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏–∏',
        'help': '‚ùì –ü–æ–º–æ—â—å'
    }
    
    text_name = text_names.get(text_type, text_type)
    
    await callback.answer(f"‚úÖ –¢–µ–∫—Å—Ç '{text_name}' —Å–±—Ä–æ—à–µ–Ω –Ω–∞ –¥–µ—Ñ–æ–ª—Ç")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
    await callback.message.edit_text(
        f"üìù <b>{text_name}</b>\n\n"
        f"–¢–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_info_text_actions_keyboard(text_type)
    )

