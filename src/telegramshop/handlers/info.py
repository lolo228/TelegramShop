"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
"""
from aiogram import Router, F
from aiogram.types import Message

from ..database import Database


router = Router()


@router.message(F.text == "üìã –ü—Ä–∞–≤–∏–ª–∞")
async def show_rules(message: Message, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –º–∞–≥–∞–∑–∏–Ω–∞"""
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except Exception:
        pass
    
    rules_text = await db.get_info_text('rules')
    if not rules_text:
        rules_text = "üìã –ü—Ä–∞–≤–∏–ª–∞ –º–∞–≥–∞–∑–∏–Ω–∞\n\n–¢–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    await message.answer(rules_text)


@router.message(F.text == "‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏–∏")
async def show_guarantees(message: Message, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞"""
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except Exception:
        pass
    
    guarantees_text = await db.get_info_text('guarantees')
    if not guarantees_text:
        guarantees_text = "‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏–∏\n\n–¢–µ–∫—Å—Ç –≥–∞—Ä–∞–Ω—Ç–∏–π –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    await message.answer(guarantees_text)


@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def show_help(message: Message, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except Exception:
        pass
    
    help_text = await db.get_info_text('help')
    if not help_text:
        help_text = "‚ùì –ü–æ–º–æ—â—å\n\n–¢–µ–∫—Å—Ç –ø–æ–º–æ—â–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    await message.answer(help_text)

