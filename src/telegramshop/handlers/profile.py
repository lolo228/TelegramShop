"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from datetime import datetime

from ..database import Database
from ..keyboards import get_profile_keyboard, get_back_keyboard


router = Router()


@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except Exception:
        pass
    
    user_id = message.from_user.id
    user_data = await db.get_user(user_id)
    
    if not user_data:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
        return
    
    username = f"@{message.from_user.username}" if message.from_user.username else "–ù–µ —É–∫–∞–∑–∞–Ω"
    
    profile_text = (
        f"‚ù§Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
        f"üí∏ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: {user_data['purchases_count']}\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']:.2f} ‚ÇΩ\n"
        f"üîë ID: {user_id}"
    )
    
    await message.answer(
        profile_text,
        reply_markup=get_profile_keyboard()
    )


@router.callback_query(F.data == "order_history")
async def show_order_history(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤"""
    user_id = callback.from_user.id
    orders = await db.get_user_orders(user_id, limit=10)
    
    if not orders:
        await callback.message.edit_text(
            "üì¶ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç–∞\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫",
            reply_markup=get_back_keyboard()
        )
    else:
        history_text = "üì¶ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:\n\n"
        
        for order in orders:
            created_at = datetime.fromisoformat(order['created_at']).strftime("%d.%m.%Y %H:%M")
            status_emoji = "‚úÖ" if order['status'] == "completed" else "‚è≥"
            
            history_text += (
                f"{status_emoji} –ó–∞–∫–∞–∑ #{order['order_id']}\n"
                f"üì¶ –¢–æ–≤–∞—Ä: {order['product_name']}\n"
                f"üí∞ –°—É–º–º–∞: {order['amount']:.2f} ‚ÇΩ\n"
                f"üìÖ –î–∞—Ç–∞: {created_at}\n\n"
            )
        
        await callback.message.edit_text(
            history_text,
            reply_markup=get_back_keyboard()
        )
    
    await callback.answer()


@router.callback_query(F.data == "payment_history")
async def show_payment_history(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π"""
    user_id = callback.from_user.id
    payments = await db.get_user_payments(user_id, limit=10)
    
    if not payments:
        await callback.message.edit_text(
            "üí≥ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø—É—Å—Ç–∞\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∞",
            reply_markup=get_back_keyboard()
        )
    else:
        history_text = "üí≥ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π:\n\n"
        
        for payment in payments:
            created_at = datetime.fromisoformat(payment['created_at']).strftime("%d.%m.%Y %H:%M")
            
            status_emoji = {
                "completed": "‚úÖ",
                "pending": "‚è≥",
                "cancelled": "‚ùå"
            }.get(payment['status'], "‚ùì")
            
            history_text += (
                f"{status_emoji} –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ #{payment['payment_id']}\n"
                f"üí∞ –°—É–º–º–∞: {payment['amount']:.2f} ‚ÇΩ\n"
                f"üí≥ –°–ø–æ—Å–æ–±: {payment['payment_method']}\n"
                f"üìÖ –î–∞—Ç–∞: {created_at}\n\n"
            )
        
        await callback.message.edit_text(
            history_text,
            reply_markup=get_back_keyboard()
        )
    
    await callback.answer()


@router.callback_query(F.data == "add_balance")
async def add_balance(callback: CallbackQuery):
    """–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"""
    await callback.message.edit_text(
        "üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n"
        "üöß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.",
        reply_markup=get_back_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_profile")
async def back_to_profile(callback: CallbackQuery, db: Database):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é"""
    user_id = callback.from_user.id
    user_data = await db.get_user(user_id)
    
    if not user_data:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")
        return
    
    username = f"@{callback.from_user.username}" if callback.from_user.username else "–ù–µ —É–∫–∞–∑–∞–Ω"
    
    profile_text = (
        f"‚ù§Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
        f"üí∏ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: {user_data['purchases_count']}\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']:.2f} ‚ÇΩ\n"
        f"üîë ID: {user_id}"
    )
    
    await callback.message.edit_text(
        profile_text,
        reply_markup=get_profile_keyboard()
    )
    await callback.answer()


@router.message(F.text == "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def add_balance_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except Exception:
        pass
    
    await message.answer(
        "üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n"
        "üöß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞."
    )

