"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞–≥–∞–∑–∏–Ω–æ–º
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from ..database import Database
from ..keyboards import (
    get_categories_keyboard,
    get_products_keyboard,
    get_product_detail_keyboard
)


router = Router()


@router.message(F.text == "üõí –ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def show_categories(message: Message, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except Exception:
        pass
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await db.get_user(message.from_user.id)
    if user and user.get('is_blocked'):
        await message.answer(
            "üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return
    
    categories = await db.get_active_categories()
    
    if not categories:
        await message.answer(
            "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return
    
    await message.answer(
        "üõç –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ:",
        reply_markup=get_categories_keyboard(categories)
    )


@router.callback_query(F.data == "back_to_categories")
async def back_to_categories(callback: CallbackQuery, db: Database):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    categories = await db.get_active_categories()
    
    if not categories:
        await callback.message.edit_text(
            "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        "üõç –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ:",
        reply_markup=get_categories_keyboard(categories)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("category_"))
async def show_category_products(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category = await db.get_category(category_id)
    if not category:
        await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    products = await db.get_products_by_category(category_id, active_only=True)
    
    if not products:
        await callback.message.edit_text(
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category['name']}\n\n"
            f"‚ùå –í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.",
            reply_markup=get_products_keyboard([], category_id)
        )
        await callback.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    text = f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category['name']}\n"
    if category.get('description'):
        text += f"\n{category['description']}\n"
    text += f"\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_products_keyboard(products, category_id)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("product_"))
async def show_product_detail(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞"""
    product_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    product = await db.get_product(product_id)
    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
    text = f"üéØ {product['name']}\n\n"
    
    if product.get('description'):
        text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{product['description']}\n\n"
    
    text += f"üí∞ –¶–µ–Ω–∞: {product['price']} —Ä—É–±.\n"
    text += f"üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {product['stock_count']} —à—Ç.\n"
    
    if product['stock_count'] == 0:
        text += "\n‚ùå –¢–æ–≤–∞—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    
    in_stock = product['stock_count'] > 0
    
    await callback.message.edit_text(
        text,
        reply_markup=get_product_detail_keyboard(
            product_id,
            product['category_id'],
            in_stock
        )
    )
    await callback.answer()


@router.callback_query(F.data.startswith("buy_"))
async def buy_product(callback: CallbackQuery, db: Database):
    """–ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä"""
    product_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    product = await db.get_product(product_id)
    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞
    if product['stock_count'] == 0:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = await db.get_user(user_id)
    if not user:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    if user['balance'] < product['price']:
        await callback.answer(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n\n"
            f"–ù—É–∂–Ω–æ: {product['price']} —Ä—É–±.\n"
            f"–£ –≤–∞—Å: {user['balance']} —Ä—É–±.\n"
            f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {product['price'] - user['balance']} —Ä—É–±.",
            show_alert=True
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–æ–≤–∞—Ä
    item = await db.get_available_product_item(product_id)
    if not item:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è", show_alert=True)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
        await db.update_product_stock(product_id)
        return
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
    await db.update_user_balance(user_id, -product['price'])
    
    # –û—Ç–º–µ—á–∞–µ–º —Ç–æ–≤–∞—Ä –∫–∞–∫ –ø—Ä–æ–¥–∞–Ω–Ω—ã–π
    await db.mark_item_as_sold(item['item_id'], user_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
    await db.update_product_stock(product_id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ
    await db.add_order(user_id, product['name'], product['price'])
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–∫—É–ø–æ–∫
    await db.increment_purchases(user_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback.message.answer(
        f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üéØ –¢–æ–≤–∞—Ä: {product['name']}\n"
        f"üí∞ –¶–µ–Ω–∞: {product['price']} —Ä—É–±.\n\n"
        f"üì¶ –í–∞—à —Ç–æ–≤–∞—Ä:\n\n"
        f"<code>{item['data']}</code>\n\n"
        f"üí∞ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user['balance'] - product['price']} —Ä—É–±.",
        parse_mode="HTML"
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–æ–º
    new_balance = user['balance'] - product['price']
    await callback.message.edit_text(
        f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üéØ –¢–æ–≤–∞—Ä: {product['name']}\n"
        f"üí∞ –°–ø–∏—Å–∞–Ω–æ: {product['price']} —Ä—É–±.\n"
        f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} —Ä—É–±.\n\n"
        f"–¢–æ–≤–∞—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚¨ÜÔ∏è"
    )
    
    await callback.answer("‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!")

